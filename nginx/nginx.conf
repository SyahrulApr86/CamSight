events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;

    # Basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Upstream servers
    upstream backend {
        server backend:8000;
    }

    upstream frontend {
        server frontend:3000;
    }

    server {
        listen 80;
        server_name localhost;

        # Increase body size for file uploads
        client_max_body_size 50M;

        # Proxy settings
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Backend API routes
        location /api {
            # Remove /api prefix when forwarding to backend
            rewrite ^/api(.*)$ $1 break;
            proxy_pass http://backend;
            proxy_redirect off;
            
            # Timeouts for API requests
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }

        # WebSocket connections
        location /ws {
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
        }

        # Video feed (keep this as direct route since it's not prefixed with /api)
        location /video_feed {
            proxy_pass http://backend;
            proxy_redirect off;
            proxy_buffering off;
            proxy_cache off;
            
            # Special headers for video streaming
            proxy_set_header Cache-Control "no-cache, no-store, must-revalidate";
            proxy_set_header Pragma "no-cache";
            proxy_set_header Expires "0";
        }

        # Frontend routes
        location / {
            proxy_pass http://frontend;
            proxy_redirect off;
            
            # Handle Next.js routing
            try_files $uri $uri/ @nextjs;
        }

        # Fallback for Next.js routing
        location @nextjs {
            proxy_pass http://frontend;
        }

        # Health check endpoint
        location /nginx-health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # Error pages
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        
        location = /50x.html {
            root /usr/share/nginx/html;
        }
    }
} 